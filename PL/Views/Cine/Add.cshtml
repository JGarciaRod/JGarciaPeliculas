@model ML.Cine
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

@{

    @using (Html.BeginForm("Add", "Cine", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.HiddenFor( model=>model.IdCine )

        <div class="row">
            <div class="col-md-6">
                @Html.LabelFor(model => model.Nombre, new{ @class="hidden"})
                @Html.TextBoxFor(model => model.Nombre, new { @class="form-control" })
            </div>

            <div class="col-md-3">
                @Html.LabelFor(model => model.Ventas,new{@class="hidden" } )
                @Html.TextBoxFor(model => model.Ventas,new {@class="form-control"})
            </div>

            <div class="col-md-3">
                @Html.LabelFor(model => model.Zona.IdZona, new{@class="hidden" } )
                @Html.TextBoxFor(model=>model.Zona.IdZona, new {@class="form-control"})
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-md-6">
                @Html.LabelFor(model => model.Direccion, new{ @class="hidden"})
                @Html.TextBoxFor(model => model.Direccion, new { @class="form-control", @readonly=true, @placeholder = "Señale un punto en el mapa" , @id="txtDireccion" })
            </div>

            <div class="col-md-3">
                <input type="submit" data-toggle="modal" class="btn btn-success form-control" value="Guardar" />
            </div>

            <div class="col-md-3">
                <a id="back" class="btn btn-danger form-control" href="@Url.Action("GetAllCines", "Cine")">Volver</a>
            </div>
            <hr />
        </div>

        <div id="map">
        </div>
    }
    <style>
        #map {
            height: 400px;
            width: 100%;
        }
    </style>
    @section Scripts{
        <script type="text/javascript">

            (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })({
                key: "AIzaSyCSKBDdPPlfca_zTwyxKiicRQn1qfgRjLw",
                v: "weekly",
            });

            
            let position;
            var geocoder;


            async function Leer() {
                var geocoder;


                const { Map } = await google.maps.importLibrary("maps");

                //variable
                var direccion = $("#txtDireccion").val();

                if (direccion == "") {
                    //variable
                    position = { lat: 19.394208, lng: -99.028858 };
                    initMap(position);
                }
                else {
                    geocoder = new google.maps.Geocoder();
                    //Lee la pisicion
                    geocoder.geocode({ 'address': direccion }, function (results, status) {
                        
                        if (status == 'OK') {

                            //
                            position = { lat: results[0].geometry.location.lat(), lng: results[0].geometry.location.lng() };
                            initMap(position);
                            

                        }
                        else {
                            alert('Geocode was not successful for the following reason: ' + status);
                        }
                    });
                }
            }




            // Initialize and add the map
            let map;
            

            async function initMap(position) {
                // The location of Uluru
                //const position = { lat: -25.344, lng: 131.031 };
                // Request needed libraries.
                
                const { Map } = await google.maps.importLibrary("maps");
                const { AdvancedMarkerView } = await google.maps.importLibrary("marker");

                // The map, centered at Uluru
                map = new Map(document.getElementById("map"), {
                    zoom: 16,
                    center: position,
                    mapId: "DEMO_MAP_ID",
                });

                // The marker, positioned at Uluru
                const marker = new google.maps.Marker({
                    map: map,
                    position: position,
                    title: "Uluru",
                });

                google.maps.event.addListener(map, 'click', function (event) {
                    const latLng = event.latLng;
                    marker.setPosition(latLng);

                    var geocoder = new google.maps.Geocoder();
                    geocoder.geocode({
                        'latLng': event.latLng
                    }, function (results, status) {
                        if (status == google.maps.GeocoderStatus.OK) {
                            $("#txtDireccion").val(results[0].formatted_address);
                        } else {
                            $("#txtDireccion").val("Localizacion no encontrada");
                        }
                    });
                });
            }

            Leer();
            initMap(position);

        </script>
    }

}



